#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/MC/TargetRegistry.h"

#include "MCTargetDesc/PICMidMCTargetDesc.h"
#include "PICMidInstLower.h"
#include "TargetInfo/PICMidTargetInfo.h"

#define DEBUG_TYPE "asm-printer"

using namespace llvm;

namespace {

class PICMidAsmPrinter : public AsmPrinter {
public:
  explicit PICMidAsmPrinter(TargetMachine &TM,
                            std::unique_ptr<MCStreamer> Streamer)
      : AsmPrinter(TM, std::move(Streamer)), InstLowering(OutContext, *this) {}

  // Generated by TableGen.
  bool emitPseudoExpansionLowering(MCStreamer &OutStreamer,
                                   const MachineInstr *MI);

  void emitInstruction(const MachineInstr *I) override;

  // Wrapper needed for tblgenned pseudo lowering.
  void lowerOperand(const MachineOperand &MO, MCOperand &MCOp);

  StringRef getPassName() const override { return "Print PICMid Assembly"; }

private:
  PICMidMCInstLower InstLowering;
};

} // namespace

void PICMidAsmPrinter::emitInstruction(const MachineInstr *I) {
  if (emitPseudoExpansionLowering(*OutStreamer, I)) {
    return;
  }
}

void PICMidAsmPrinter::lowerOperand(const MachineOperand &MO, MCOperand &MCOp) {
  // TODO: Fill in
  //   MCContext &
  if (!InstLowering.lowerOperand(MO, MCOp)) {
    llvm_unreachable("Failed to lower operand");
  }
}

#include "PICMidGenMCPseudoLowering.inc"

extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializePICMidAsmPrinter() {
  RegisterAsmPrinter<PICMidAsmPrinter> X(getThePICMidTarget());
}
