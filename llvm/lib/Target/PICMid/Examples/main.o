; ModuleID = 'main.bc'
source_filename = "main.c"
target datalayout = "e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8"
target triple = "avr"

; Function Attrs: noinline nounwind optnone
define dso_local i16 @foo(i16 noundef %0) addrspace(1) #0 {
  %2 = alloca i16, align 1
  store i16 %0, ptr %2, align 1
  %3 = load i16, ptr %2, align 1
  %4 = add nsw i16 %3, 1
  store i16 %4, ptr %2, align 1
  ret i16 %3
}

; Function Attrs: noinline nounwind optnone
define dso_local void @main() addrspace(1) #0 {
  %1 = alloca i16, align 2
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i16, align 1
  store i16 2, ptr %1, align 2
  store i16 3, ptr %2, align 2
  %5 = load i16, ptr %1, align 2
  %6 = load i16, ptr %2, align 2
  %7 = add i16 %5, %6
  store i16 %7, ptr %3, align 2
  %8 = load i16, ptr %1, align 2
  %9 = load i16, ptr %2, align 2
  %10 = mul i16 %8, %9
  store i16 %10, ptr %3, align 2
  %11 = load i16, ptr %1, align 2
  %12 = load i16, ptr %2, align 2
  %13 = sub i16 %11, %12
  store i16 %13, ptr %3, align 2
  %14 = load i16, ptr %1, align 2
  %15 = load i16, ptr %2, align 2
  %16 = udiv i16 %14, %15
  store i16 %16, ptr %3, align 2
  %17 = load i16, ptr %1, align 2
  %18 = load i16, ptr %2, align 2
  %19 = or i16 %17, %18
  store i16 %19, ptr %3, align 2
  %20 = load i16, ptr %1, align 2
  %21 = load i16, ptr %2, align 2
  %22 = and i16 %20, %21
  store i16 %22, ptr %3, align 2
  %23 = load i16, ptr %1, align 2
  %24 = load i16, ptr %2, align 2
  %25 = xor i16 %23, %24
  store i16 %25, ptr %3, align 2
  %26 = load i16, ptr %1, align 2
  %27 = load i16, ptr %2, align 2
  %28 = lshr i16 %26, %27
  store i16 %28, ptr %3, align 2
  %29 = load i16, ptr %1, align 2
  %30 = load i16, ptr %2, align 2
  %31 = shl i16 %29, %30
  store i16 %31, ptr %3, align 2
  %32 = load i16, ptr %1, align 2
  %33 = icmp ne i16 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %0
  %35 = load i16, ptr %2, align 2
  %36 = icmp ne i16 %35, 0
  br label %37

37:                                               ; preds = %34, %0
  %38 = phi i1 [ true, %0 ], [ %36, %34 ]
  %39 = zext i1 %38 to i16
  store i16 %39, ptr %3, align 2
  %40 = load i16, ptr %1, align 2
  %41 = icmp ne i16 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %37
  %43 = load i16, ptr %2, align 2
  %44 = icmp ne i16 %43, 0
  br label %45

45:                                               ; preds = %42, %37
  %46 = phi i1 [ false, %37 ], [ %44, %42 ]
  %47 = zext i1 %46 to i16
  store i16 %47, ptr %3, align 2
  %48 = load i16, ptr %1, align 2
  %49 = load i16, ptr %2, align 2
  %50 = urem i16 %48, %49
  store i16 %50, ptr %3, align 2
  store i16 0, ptr %4, align 1
  br label %51

51:                                               ; preds = %58, %45
  %52 = load i16, ptr %4, align 1
  %53 = icmp slt i16 %52, 10
  br i1 %53, label %54, label %61

54:                                               ; preds = %51
  %55 = load i16, ptr %4, align 1
  %56 = load i16, ptr %1, align 2
  %57 = add i16 %56, %55
  store i16 %57, ptr %1, align 2
  br label %58

58:                                               ; preds = %54
  %59 = load i16, ptr %4, align 1
  %60 = add nsw i16 %59, 1
  store i16 %60, ptr %4, align 1
  br label %51, !llvm.loop !3

61:                                               ; preds = %51
  %62 = load i16, ptr %1, align 2
  %63 = icmp ult i16 %62, 6
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i16 3, ptr %3, align 2
  br label %66

65:                                               ; preds = %61
  store i16 4, ptr %3, align 2
  br label %66

66:                                               ; preds = %65, %64
  %67 = load i16, ptr %3, align 2
  %68 = call addrspace(1) i16 @foo(i16 noundef %67)
  store i16 %68, ptr %3, align 2
  ret void
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 2}
!1 = !{i32 7, !"frame-pointer", i32 2}
!2 = !{!"clang version 16.0.6"}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.mustprogress"}
